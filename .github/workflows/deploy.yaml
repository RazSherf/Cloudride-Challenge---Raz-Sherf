name: Deploy Hello World App to ECS

on:
  push:
    branches: [ main ]

jobs:
  deploy:
    name: Build and Deploy to Amazon ECS
    runs-on: ubuntu-latest

    env:
      AWS_REGION: ${{ secrets.AWS_REGION }}
      ECR_REPOSITORY: ${{ secrets.ECR_REPOSITORY }}
      ECS_CLUSTER_NAME: ${{ secrets.ECS_CLUSTER_NAME }}
      ECS_SERVICE_NAME: ${{ secrets.ECS_SERVICE_NAME }}
      CONTAINER_NAME: ${{ secrets.CONTAINER_NAME }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build and push Docker image to ECR
        uses: docker/build-push-action@v5
        env:
          IMAGE_TAG: ${{ github.sha }}
        with:
          context: .
          push: true
          tags: ${{ steps.login-ecr.outputs.registry }}/${{ env.ECR_REPOSITORY }}:${{ env.IMAGE_TAG }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Set IMAGE_URI for next steps
        id: set-image
        env:
          IMAGE_TAG: ${{ github.sha }}
        run: |
          IMAGE_URI="${{ steps.login-ecr.outputs.registry }}/${{ env.ECR_REPOSITORY }}:${IMAGE_TAG}"
          echo "IMAGE_URI=$IMAGE_URI" >> $GITHUB_ENV
          echo "::set-output name=image_uri::$IMAGE_URI"

      - name: Replace placeholders in task definition
        run: |
          REGION="${{ env.AWS_REGION }}"
          EXEC_ROLE="${{ secrets.ECS_EXECUTION_ROLE_ARN }}"
          TASK_ROLE="${{ secrets.ECS_TASK_ROLE_ARN }}"

          sed -i "s|REPLACE_REGION|$REGION|g" .github/task-definition.json
          sed -i "s|REPLACE_EXECUTION_ROLE_ARN|$EXEC_ROLE|g" .github/task-definition.json
          sed -i "s|REPLACE_TASK_ROLE_ARN|$TASK_ROLE|g" .github/task-definition.json

      - name: Fill in new image URI in task definition
        id: render-task
        uses: aws-actions/amazon-ecs-render-task-definition@v1
        with:
          task-definition: .github/task-definition.json
          container-name: ${{ env.CONTAINER_NAME }}
          image: ${{ steps.set-image.outputs.image_uri }}

      - name: Deploy ECS task definition to ECS service
        uses: aws-actions/amazon-ecs-deploy-task-definition@v2
        with:
          cluster: ${{ env.ECS_CLUSTER_NAME }}
          service: ${{ env.ECS_SERVICE_NAME }}
          task-definition: ${{ steps.render-task.outputs.task-definition }}
          wait-for-service-stability: true
          wait-for-minutes: 10

      - name: Check service status
        run: |
          echo "Checking service status..."
          aws ecs describe-services \
            --cluster ${{ env.ECS_CLUSTER_NAME }} \
            --services ${{ env.ECS_SERVICE_NAME }} \
            --region ${{ env.AWS_REGION }} \
            --query "services[0].{status:status,desiredCount:desiredCount,runningCount:runningCount,pendingCount:pendingCount,events:events[0:5]}"

      - name: Check task status
        run: |
          echo "Checking task status..."
          TASK_ARNS=$(aws ecs list-tasks \
            --cluster ${{ env.ECS_CLUSTER_NAME }} \
            --service-name ${{ env.ECS_SERVICE_NAME }} \
            --region ${{ env.AWS_REGION }} \
            --query "taskArns" \
            --output text)
          
          if [ ! -z "$TASK_ARNS" ]; then
            aws ecs describe-tasks \
              --cluster ${{ env.ECS_CLUSTER_NAME }} \
              --tasks $TASK_ARNS \
              --region ${{ env.AWS_REGION }} \
              --query "tasks[].{lastStatus:lastStatus,stoppedReason:stoppedReason,containers:containers[].{name:name,lastStatus:lastStatus,reason:reason}}"
          else
            echo "No tasks found"
          fi

      - name: Check target group health
        run: |
          echo "Checking target group health..."
          aws elbv2 describe-target-health \
            --target-group-arn $(aws ecs describe-services \
              --cluster ${{ env.ECS_CLUSTER_NAME }} \
              --services ${{ env.ECS_SERVICE_NAME }} \
              --region ${{ env.AWS_REGION }} \
              --query "services[0].loadBalancers[0].targetGroupArn" \
              --output text) \
            --region ${{ env.AWS_REGION }}